[build-system]
build-backend = "setuptools.build_meta"
requires = [
    "setuptools>=64",
    "setuptools_scm>=8",
]

[project]
authors = [
    { email = "jabesq@gmail.com", name = "Hugo Dupras" },
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Home Automation",
]
dependencies = [
    "aiohttp>=3.7.4,<4.0.0",
    "oauthlib~=3.1",
    "requests-oauthlib>=1.3,<3.0",
    "requests~=2.24",
]
description = "Simple API to access Netatmo weather station data from any Python 3 script. Designed for Home Assistant (but not only)"
dynamic = [
    "version",
]
maintainers = [
    { email = "cgtobi@gmail.com", name = "Tobias Sauerwein" },
    { email = "jabesq@gmail.com", name = "Hugo Dupras" },
]
name = "pyatmo"
readme = "README.md"
requires-python = ">=3.11,<3.14"

[project.urls]
Changelog = "https://github.com/jabesq-org/pyatmo/blob/development/CHANGELOG.md"
Homepage = "https://github.com/jabesq-org/pyatmo"
Issues = "https://github.com/jabesq-org/pyatmo/issues"
Repository = "https://github.com/jabesq-org/pyatmo.git"

[tool.mypy]
explicit_package_bases = true
namespace_packages = true
show_error_context = true
show_error_codes = true
pretty = true
check_untyped_defs = true
strict_equality = true
implicit_optional=true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
warn_no_return = true
disallow_incomplete_defs = true

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"
asyncio_mode = "auto"
minversion = "8.0"

[tool.ruff]
fix = true
line-length = 88
target-version = "py312"

[tool.ruff.lint]
ignore = [
    "D202",  # blank-line-after-function (D202)
    "D203",  # incorrect-blank-line-before-class (D203)
    "D213",  # multi-line-summary-second-line (D213)
    "DTZ005",  # call-datetime-now-without-tzinfo (DTZ005)
    "DTZ006",  # call-datetime-fromtimestamp (DTZ006)
    "E501",  # line-too-long (E501)
    "FBT001",  # Boolean-typed positional argument in function definition (FBT001)
    "FBT002",  # Boolean default positional argument in function definition (FBT002)
    "FBT003",  # Boolean positional value in function call (FBT003)
    "PLR0913",  # Too many arguments in function definition (PLR0913)
    "PLW2901",  # redefined-loop-name (PLW2901)
]
select = [
    "ALL",
]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.lint.flake8-tidy-imports.banned-api.pytz]
msg = "use zoneinfo instead"

[tool.ruff.lint.isort]
combine-as-imports = true
force-sort-within-sections = true
split-on-trailing-comma = false

[tool.ruff.lint.mccabe]
max-complexity = 12

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "ANN001",
    "ANN002",
    "ANN003",
    "ANN201",
    "ANN202",
    "ANN204",
    "D10",
    "DTZ001",
    "N802",
    "PLR2004",
    "S101",
    "S105",
]

[tool.setuptools_scm]
local_scheme = "no-local-version"

[tool.uv]
dev-dependencies = [
    "anyio>=4.3.0",
    "black>=24.8.0",
    "codespell>=2.3.0",
    "docutils>=0.21.2",
    "mypy>=1.11.2",
    "pre-commit>=3.8.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "pytest>=8.3.3",
    "requests-mock>=1.12.1",
    "ruff>=0.6.4",
    "time-machine>=2.15.0",
    "tox-uv>=1.25.0",
    "twine>=6.1.0",
]
